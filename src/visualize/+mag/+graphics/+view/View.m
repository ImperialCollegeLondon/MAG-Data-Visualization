classdef (Abstract) View < matlab.mixin.Heterogeneous & mag.mixin.SetGet
% VIEW Abstract base class for view of MAG data.

    properties (Constant, Access = protected)
        % FLABEL Frequency label.
        FLabel (1, 1) string = "frequency [Hz]"
        % PLABEL Power label.
        PLabel (1, 1) string = "power [dB]"
        % PSDLABEL PSD label.
        PSDLabel (1, 1) string = "PSD [nT Hz^{-0.5}]"
        % TLABEL Temperature label.
        TLabel (1, 1) string = "T [" + char(176) + "C]"
    end

    properties
        % FACTORY Graphics factory.
        Factory (1, 1) mag.graphics.factory.Factory = mag.graphics.factory.DefaultFactory()
    end

    properties (SetAccess = protected)
        % RESULTS Data to visualize.
        Results (1, 1) mag.Instrument
        % FIGURES Figures generated by view.
        Figures (1, :) matlab.ui.Figure
    end

    methods (Sealed)

        function figures = visualizeAll(this)
        % VISUALIZEALL Visualize all views in array and return figures.

            arguments (Input)
                this (1, :) mag.graphics.view.View
            end

            arguments (Output)
                figures (1, :) matlab.ui.Figure
            end

            if isempty(this)
                figures = matlab.ui.Figure.empty();
            else

                for v = this

                    try
                        v.visualize();
                    catch exception

                        if isempty(exception.stack)
                            setBreakpointHyperlink = char.empty();
                        else
                            setBreakpointHyperlink = compose("\n\nClick <a href=""matlab:mag.internal.stopIfException('%s')"">here</a> to set a breakpoint at the error source.", exception.identifier);
                        end

                        warning("Failed to visualize ""%s"" because of error ""%s"":\n%s%s", class(v), exception.identifier, exception.message, setBreakpointHyperlink);
                    end
                end

                figures = [this.Figures];
            end
        end
    end

    methods (Abstract)

        % VISUALIZE Visualize data.
        visualize(this)
    end

    methods (Access = protected)

        function [primarySensor, secondarySensor] = getSensorNames(this)
        % GETSENSORNAMES Get names of primary and secondary sensors.

            if numel(this.Results.Science) > 1

                primarySensor = string(this.Results.Science.getName("Primary"));
                secondarySensor = string(this.Results.Science.getName("Secondary"));
            else

                primarySensor = "FOB";
                secondarySensor = "FIB";
            end
        end
    end

    methods (Static, Access = protected)

        function date = date2str(date, format)
        % DATE2STR Convert datetime to string.

            arguments
                date (1, 1) datetime
                format (1, 1) string = "dd-MMM-yyyy HHmmss"
            end

            date.Format = format;
        end

        function dataFrequency = getDataFrequency(metaData)
        % GETDATAFREQUENCY Get frequency of science data.

            arguments
                metaData (1, 1) mag.meta.Science
            end

            dataFrequency = metaData.getDisplay("DataFrequency");

            if ~ismissing(dataFrequency) && (dataFrequency < 1)

                [num, den] = rat(dataFrequency);
                dataFrequency = compose("%d/%d", num, den);
            else
                dataFrequency = num2str(dataFrequency);
            end
        end
    end
end
